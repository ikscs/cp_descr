-----

## Как реализовать серверную пагинацию и фильтрацию в React Data Grid

Реализация **серверной пагинации и фильтрации** в React Data Grid — это стандартный подход для работы с большими объемами данных. Вместо того чтобы загружать все данные на клиент, вы делегируете обработку фильтрации и пагинации серверу. Это значительно улучшает производительность и пользовательский опыт.

Вот пошаговое руководство по реализации:

### 1\. Архитектура взаимодействия

1.  **Клиент (React Data Grid):**

      * Отправляет запросы на сервер с параметрами пагинации (номер страницы, размер страницы) и фильтрации (критерии фильтрации).
      * Получает от сервера только подмножество данных, соответствующее запросу.
      * Отображает эти данные и информацию о пагинации (общее количество строк, количество страниц).

2.  **Сервер (Backend API):**

      * Получает параметры запроса от клиента.
      * Выполняет запрос к базе данных, применяя фильтрацию и пагинацию.
      * Возвращает клиенту данные для текущей страницы, а также **общее количество отфильтрованных строк** (это критически важно для корректной работы пагинации на клиенте).

### 2\. Реализация на стороне клиента (React)

#### Шаг 1: Управление состоянием

Вам нужно хранить в состоянии React компонента следующие параметры:

  * `rows`: Массив данных, который будет отображаться в таблице (данные для текущей страницы).
  * `filters`: Объект или массив, содержащий текущие параметры фильтрации (например, `{ name: 'John', status: 'Active' }`).
  * `sorts`: Объект или массив, содержащий параметры сортировки (если вы тоже реализуете серверную сортировку).
  * `page`: Текущий номер страницы.
  * `pageSize`: Количество строк на странице.
  * `totalCount`: Общее количество отфильтрованных строк, полученных с сервера (необходим для вычисления общего количества страниц).
  * `isLoading`: Флаг, указывающий на загрузку данных (для отображения индикатора загрузки).

<!-- end list -->

```javascript
import React, { useState, useEffect, useCallback } from 'react';
import ReactDataGrid from '@inovua/reactdatagrid-enterprise'; // или ваша версия React Data Grid

const MyDataGrid = () => {
  const [rows, setRows] = useState([]);
  const [filters, setFilters] = useState({});
  const [sorts, setSorts] = useState([]);
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [totalCount, setTotalCount] = useState(0);
  const [isLoading, setIsLoading] = useState(false);

  // ... определение колонок и других настроек грида
  const columns = [
    { name: 'id', header: 'ID', defaultWidth: 80 },
    { name: 'name', header: 'Имя', defaultFlex: 1 },
    { name: 'email', header: 'Email', defaultFlex: 1 },
    // ... другие колонки
  ];

  // ...
};
```

#### Шаг 2: Функция для загрузки данных

Создайте асинхронную функцию, которая будет отправлять запрос на сервер.

```javascript
  const fetchData = useCallback(async () => {
    setIsLoading(true);
    try {
      // Формируем параметры запроса для сервера
      const queryParams = new URLSearchParams({
        page: page,
        pageSize: pageSize,
        // Добавляем параметры фильтрации
        ...filters,
        // Добавляем параметры сортировки
        // sorts: JSON.stringify(sorts) // Если сортировка тоже серверная
      }).toString();

      const response = await fetch(`/api/data?${queryParams}`); // Замените на ваш API-эндпоинт
      const data = await response.json();

      setRows(data.rows); // Данные для текущей страницы
      setTotalCount(data.totalCount); // Общее количество отфильтрованных записей
    } catch (error) {
      console.error("Ошибка при загрузке данных:", error);
    } finally {
      setIsLoading(false);
    }
  }, [page, pageSize, filters, sorts]); // Зависимости для useCallback

  // Вызываем fetchData при изменении параметров пагинации или фильтрации
  useEffect(() => {
    fetchData();
  }, [fetchData]);
```

#### Шаг 3: Обработчики событий React Data Grid

React Data Grid предоставляет пропсы для обработки изменений фильтров и страниц.

  * **`onFilterValueChange`**: Вызывается при изменении значения фильтра.
  * **`onPaginationChange`**: Вызывается при изменении страницы или размера страницы.
  * **`onSortInfoChange`**: Вызывается при изменении параметров сортировки (если сортировка серверная).

<!-- end list -->

```javascript
  const onFilterValueChange = useCallback(({ filterValue }) => {
    setFilters(filterValue);
    setPage(1); // При изменении фильтра всегда сбрасываем на первую страницу
  }, []);

  const onPaginationChange = useCallback(({ page, pageSize }) => {
    setPage(page);
    setPageSize(pageSize);
  }, []);

  // Если сортировка тоже серверная
  const onSortInfoChange = useCallback((newSortInfo) => {
    setSorts(newSortInfo);
    setPage(1); // Сбросить страницу при изменении сортировки
  }, []);
```

#### Шаг 4: Конфигурация React Data Grid

Передайте данные и обработчики в пропсы React Data Grid. Важно указать `dataSource` или `rows` и соответствующие пропсы для серверной обработки.

```javascript
return (
    <ReactDataGrid
        columns={columns}
        dataSource={rows} // Используем dataSource или rows в зависимости от версии
        loading={isLoading}
        pagination={true} // Включаем пагинацию
        limit={pageSize} // Размер страницы
        skip={(page - 1) * pageSize} // Смещение для текущей страницы
        totalCount={totalCount} // Общее количество отфильтрованных строк
        onFilterValueChange={onFilterValueChange}
        onPaginationChange={onPaginationChange}
        onSortInfoChange={onSortInfoChange} // Если сортировка серверная
        showZebraRows={false}
        enableColumnAutosize={true}
        // ... другие пропсы
    />
);
```

### 3\. Реализация на стороне сервера (Backend API)

Это будет зависеть от используемого вами языка и фреймворка (Node.js с Express, Python с Django/Flask, PHP с Laravel и т.д.) и базы данных.

**Пример (псевдокод Node.js/Express с MongoDB):**

```javascript
// routes/api.js (пример)

const express = require('express');
const router = express.Router();
const User = require('../models/User'); // Ваша модель данных (например, Mongoose)

router.get('/data', async (req, res) => {
    try {
        const { page = 1, pageSize = 10, ...filterParams } = req.query; // Получаем параметры из запроса

        const skip = (parseInt(page) - 1) * parseInt(pageSize);
        const limit = parseInt(pageSize);

        // Формируем объект фильтрации для MongoDB
        const filterQuery = {};
        for (const key in filterParams) {
            // Здесь должна быть логика для обработки различных типов фильтров
            // Например, для текстового поиска по полю 'name':
            if (key === 'name') {
                filterQuery[key] = { $regex: new RegExp(filterParams[key], 'i') }; // 'i' для регистронезависимого поиска
            } else if (key === 'status') {
                filterQuery[key] = filterParams[key];
            }
            // ... другие фильтры
        }

        // Если есть сортировка (пример для одного поля)
        // const sortQuery = {};
        // if (req.query.sorts) {
        //   const sortInfo = JSON.parse(req.query.sorts)[0]; // Пример для одного поля
        //   sortQuery[sortInfo.name] = sortInfo.dir === 'asc' ? 1 : -1;
        // }


        // Получаем отфильтрованные данные для текущей страницы
        const rows = await User.find(filterQuery)
                               .skip(skip)
                               .limit(limit)
                               // .sort(sortQuery) // Применяем сортировку
                               .exec();

        // Получаем общее количество отфильтрованных данных (для пагинации на клиенте)
        const totalCount = await User.countDocuments(filterQuery);

        res.json({ rows, totalCount });

    } catch (error) {
        console.error("Ошибка сервера:", error);
        res.status(500).json({ message: "Ошибка сервера" });
    }
});

module.exports = router;
```

### Ключевые моменты для серверной реализации:

  * **Парсинг параметров:** Аккуратно извлекайте `page`, `pageSize`, `filters` и `sorts` из `req.query`.
  * **Формирование запроса к БД:** Преобразуйте параметры фильтрации и сортировки в формат, понятный вашей базе данных (например, `WHERE` условия в SQL, объекты запроса в MongoDB).
  * **Два запроса к БД (обычно):**
    1.  Один запрос для получения **подмножества данных** для текущей страницы (с `LIMIT` и `OFFSET` в SQL или `skip`/`limit` в MongoDB).
    2.  Второй запрос для получения **общего количества отфильтрованных записей** (например, `SELECT COUNT(*) WHERE ...`). Это необходимо, чтобы клиент мог правильно рассчитать общее количество страниц. Некоторые СУБД позволяют получить это в рамках одного запроса, но чаще всего это два отдельных.
  * **Обработка ошибок:** Всегда обрабатывайте ошибки на сервере и отправляйте соответствующий статус код (например, 500).

### Преимущества серверной пагинации и фильтрации:

  * **Производительность:** Только необходимый объем данных передается по сети, что уменьшает нагрузку на клиент и сервер.
  * **Масштабируемость:** Способность работать с очень большими наборами данных, не завися от доступной памяти клиента.
  * **Актуальность данных:** Данные всегда запрашиваются свежие с сервера.

Это подробный подход к реализации серверной пагинации и фильтрации.






Вы используете react-data-grid версии 7.0.0-beta.47.

Это важно учитывать, так как некоторые пропсы и подходы к реализации серверной пагинации и фильтрации могли измениться по сравнению с более старыми или более новыми (стабильными) версиями.

В версии 7.x (включая бету 47) основные принципы серверной пагинации и фильтрации, которые я описал, остаются верными:

На клиенте: Вы управляете состоянием page, pageSize, filters и sorts.

Запрос к серверу: При изменении любого из этих параметров вы отправляете запрос на ваш бэкенд.

Серверный ответ: Бэкенд возвращает отфильтрованные и пагинированные данные (rows) и общее количество отфильтрованных строк (totalCount).

Пропсы грида: Вы передаёте полученные rows в dataSource грида, а totalCount в соответствующий проп.

Пропсы для обработки событий в этой версии обычно следующие:

onFilterValueChange: Для обработки изменений фильтров.

onPaginationChange: Для обработки изменений страницы и размера страницы.

onSortInfoChange: Для обработки изменений сортировки.

Пропсы для передачи данных и управления пагинацией:

dataSource: Массив данных, отображаемых на текущей странице.

totalCount: Общее количество отфильтрованных записей.

pagination: true для включения пагинации.

limit: Соответствует вашему pageSize.

skip: Расчёт смещения для текущей страницы, как (page - 1) * pageSize
