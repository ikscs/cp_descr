```typescript
// src/App.css
import { styled, keyframes } from '@mui/material/styles';

const logoSpin = keyframes`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;

export const Root = styled('div')({
  maxWidth: '1280px',
  margin: '0 auto',
  padding: '2rem',
  textAlign: 'center',
});

export const Logo = styled('img')({
  height: '6em',
  padding: '1.5em',
  willChange: 'filter',
  transition: 'filter 300ms',
  '&:hover': {
    filter: 'drop-shadow(0 0 2em #646cffaa)',
  },
  '&.react:hover': {
    filter: 'drop-shadow(0 0 2em #61dafbaa)',
  },
});

export const LogoSpinAnimation = styled('img')({
  '@media (prefers-reduced-motion: no-preference)': {
    '&:nth-of-type(2)': {
      animation: `${logoSpin} infinite 20s linear`,
    },
  },
});

export const Card = styled('div')({
  padding: '2em',
});

export const ReadTheDocs = styled('p')({
  color: '#888',
});
```

```typescript
// src/App.tsx
import React, { useState, useEffect } from 'react';
import { Routes, Route, useNavigate, Link } from 'react-router-dom';
import { useUserfront, LoginForm, SignupForm } from '@userfront/react';
import Users from './pages/Users';
import Dashboard from './pages/Dashboard';
import { Button, Box, List, ListItem } from '@mui/material';

function App() {
  const { tokens, user, logout } = useUserfront();
  const [showLogin, setShowLogin] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    if (tokens && tokens.accessToken) {
      console.log('Tokens:', tokens);
      console.log('User:', user);
      navigate('/');
    } else {
      console.log('No tokens');
    }
  }, [tokens, user, navigate]);

  const handleLogout = () => {
    logout();
    navigate('/');
  };

  const toggleForm = () => {
    setShowLogin(!showLogin);
  };

  if (tokens && tokens.accessToken) {
    return (
      <Box>
        <p>Пользователь: {user?.email}</p>
        <Button onClick={handleLogout}>Выйти</Button>
        <nav>
          <List>
            <ListItem>
              <Link to="/dashboard">Dashboard</Link>
            </ListItem>
            <ListItem>
              <Link to="/users">Users</Link>
            </ListItem>
          </List>
        </nav>
        <Routes>
          <Route path="/dashboard" element={<Dashboard />} />
          <Route path="/users" element={<Users />} />
        </Routes>
      </Box>
    );
  } else {
    return (
      <Box display="flex" flexDirection="column" alignItems="center">
        {showLogin ? <LoginForm /> : <SignupForm />}
        <Button onClick={toggleForm} sx={{ marginTop: '10px' }}>
          {showLogin ? 'Регистрация' : 'Войти'}
        </Button>
      </Box>
    );
  }
}

export default App;
```

```typescript
// src/globals.ts
export const tenantId = '8b67zygn';
export const apiKey = 'uf_live_admin_8b67zygn_9741badcf6b7d5ba32512fdfbcd01eac';
```

```typescript
// src/globals_VITE.ts
const getApiKey = () => {
  if (import.meta.env.VITE_ENV === 'production') {
    return import.meta.env.VITE_USERFRONT_LIVE_API_KEY || '';
  } else {
    return import.meta.env.VITE_USERFRONT_TEST_API_KEY || '';
  }
};

const getBaseName = () => {
  if (import.meta.env.VITE_ENV === 'production') {
    return import.meta.env.VITE_BASENAME_PROD || '';
  } else {
    return import.meta.env.VITE_BASENAME_DEV || '';
  }
};

export const tenantId = import.meta.env.VITE_USERFRONT_TENANT_ID;
export const apiKey = getApiKey();
export const basename = getBaseName();
```

```typescript
// src/index.css
import { createTheme, ThemeProvider } from '@mui/material/styles';
import { CssBaseline } from '@mui/material';

const theme = createTheme({
  palette: {
    mode: 'dark',
    background: {
      default: '#242424',
    },
    text: {
      primary: 'rgba(255, 255, 255, 0.87)',
    },
    primary: {
      main: '#646cff',
    },
  },
  typography: {
    fontFamily: 'system-ui, Avenir, Helvetica, Arial, sans-serif',
  },
  components: {
    MuiLink: {
      styleOverrides: {
        root: {
          fontWeight: 500,
          textDecoration: 'inherit',
          '&:hover': {
            color: '#535bf2',
          },
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: '8px',
          border: '1px solid transparent',
          padding: '0.6em 1.2em',
          fontSize: '1em',
          fontWeight: 500,
          fontFamily: 'inherit',
          backgroundColor: '#1a1a1a',
          cursor: 'pointer',
          transition: 'border-color 0.25s',
          '&:hover': {
            borderColor: '#646cff',
          },
          '&:focus, &:focus-visible': {
            outline: '4px auto -webkit-focus-ring-color',
          },
        },
      },
    },
  },
});

export { theme, ThemeProvider, CssBaseline };
```

```typescript
// src/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { UserfrontProvider } from '@userfront/react';
import App from './App';
import { BrowserRouter } from 'react-router-dom';
import { tenantId, basename } from './globals_VITE';
import { ThemeProvider, CssBaseline, theme } from './index.css';

if (!tenantId) {
  throw new Error('REACT_APP_USERFRONT_TENANT_ID is not defined in .env');
}

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);

root.render(
  <React.StrictMode>
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <UserfrontProvider tenantId={tenantId}>
        <BrowserRouter basename={basename}>
          <App />
        </BrowserRouter>
      </UserfrontProvider>
    </ThemeProvider>
  </React.StrictMode>
);
```

```typescript
// src/types.ts
export interface Column<T> {
  header: string;
  accessor?: keyof T;
  render?: (item: T) => React.ReactNode;
}
```

```typescript
// src/vite-env.d.ts
/// <reference types="vite/client" />
```

```typescript
// src/api/createUser.ts
import { User } from './fetchUsers';

interface CreateUserResponse {
  userId: number;
  username: string;
  email: string;
  authorization: any;
}

export async function createUser(
  tenantId: string,
  apiKey: string,
  newUserData: User
): Promise<CreateUserResponse> {
  try {
    const { authorization, ...userWithoutAuth } = newUserData;
    const response = await fetch(
      `https://api.userfront.com/v0/tenants/${tenantId}/users`,
      {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userWithoutAuth),
      }
    );

Конечно, вот продолжение, начиная с `src/api/createUser.ts`:

```typescript
    if (!response.ok) {
      const errorData = await response.json();
      console.error('Userfront error:', errorData);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data: CreateUserResponse = await response.json();
    return data;
  } catch (err) {
    throw err;
  }
}
```

```typescript
// src/api/deleteUser.ts
export async function deleteUser(
  tenantId: string,
  apiKey: string,
  userId: number
): Promise<void> {
  try {
    const response = await fetch(
      `https://api.userfront.com/v0/tenants/${tenantId}/users/${userId}`,
      {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${apiKey}`,
        },
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Userfront error:', errorData);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    return;
  } catch (err) {
    throw err;
  }
}
```

```typescript
// src/api/fetchRoles.ts
import { tenantId, apiKey } from '../globals_VITE';

interface Role {
  name: string;
}

interface RolesResponse {
  roles: Role[];
}

export async function fetchRoles(): Promise<string[]> {
  try {
    const response = await fetch(
      `https://api.userfront.com/v0/tenants/${tenantId}/roles`,
      {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${apiKey}`,
        },
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Userfront error:', errorData);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data: RolesResponse = await response.json();
    return data.roles.map((role) => role.name);
  } catch (err) {
    throw err;
  }
}
```

```typescript
// src/api/fetchUsers.ts
export interface User {
  userId: number;
  username: string;
  email: string;
  authorization: any;
  roles?: string;
}

interface UserResponse {
  meta: any;
  results: User[];
}

export async function fetchUsers(
  tenantId: string,
  apiKey: string
): Promise<User[]> {
  const response = await fetch(
    `https://api.userfront.com/v0/tenants/${tenantId}/users`,
    {
      headers: {
        Authorization: `Bearer ${apiKey}`,
      },
    }
  );

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  const data: UserResponse = await response.json();
  return data.results;
}
```

```typescript
// src/api/updateUser.ts
import { User } from './fetchUsers';

interface UpdateUserResponse {
  userId: string;
  username: string;
  email: string;
  authorization: any;
}

export async function updateUser(
  tenantId: string,
  apiKey: string,
  userId: number,
  updatedUserData: Partial<User>
): Promise<UpdateUserResponse> {
  try {
    const updatedUserData1 = {
      username: updatedUserData.username,
      email: updatedUserData.email,
    };

    const response = await fetch(
      `https://api.userfront.com/v0/tenants/${tenantId}/users/${userId}`,
      {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedUserData1),
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Userfront error:', errorData);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data: UpdateUserResponse = await response.json();
    return data;
  } catch (err) {
    throw err;
  }
}
```

```typescript
// src/api/updateUserRoles.ts
import { User } from './fetchUsers';

export interface AuthorizationUpdate {
  roles: string[];
}

export async function updateUserRoles(
  tenantId: string,
  apiKey: string,
  userId: number,
  updateData: AuthorizationUpdate
): Promise<User> {
  try {
    const response = await fetch(
      `https://api.userfront.com/v0/tenants/${tenantId}/users/${userId}/roles`,
      {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updateData),
      }
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const updatedUser: User = await response.json();
    return updatedUser;
  } catch (err) {
    throw err;
  }
}
```

```typescript
// src/assets/react.svg
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.9