** 2. `src\App.css`: **
```typescript
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

```

** 3. `src\App.tsx`: **
```typescript
import { useState, useEffect } from 'react';
import { Routes, Route, useNavigate, Link } from 'react-router-dom';
import { useUserfront, LoginForm, } from "@userfront/react";
import { SignupForm } from "@userfront/react";
import Users from './pages/Users';
import Dashboard from './pages/Dashboard';

function App() {
    const { tokens, user, logout } = useUserfront();
    const [showLogin, setShowLogin] = useState(true);

    const toggleForm = () => {
        setShowLogin(!showLogin);
    };

    const navigate = useNavigate();

    useEffect(() => {
        if (tokens && tokens.accessToken) {
            console.log('Tokens:', tokens);
            console.log('User:', user);
            navigate('/');
        } else {
            console.log('No tokens');
        }
    }, [tokens, user]); 

    const handleLogout = () => {
        logout();
        navigate('/');
    };
    if (tokens && tokens.accessToken)
        return (
            <div>
                <p>Пользователь: {user?.email}</p>
                {/* <LogoutButton compact={false}/> */}
                <button onClick={handleLogout}>Выйти</button>
                <br />
                <nav>
                <ul>
                    <li>
                        <Link to="/dashboard">Dashboard</Link>
                    </li>
                    <li>
                        <Link to="/users">Users</Link>
                    </li>
                </ul>
                </nav>
        
                <Routes>
                    <Route path="/dashboard" element={<Dashboard />} />
                    <Route path="/login" element={<Users />} />
                    <Route path="/users" element={<Users />} />
                    {/* <Route path="/" element={<Dashboard />} /> */}
                </Routes>
            </div>
        );
    else

    return (
        <div>
            {tokens && tokens.accessToken ? (
                <div>
                    <p>Вы вошли</p>
                    <button onClick={handleLogout}>Выйти</button>
                </div>
            ) : (
                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                    {showLogin ? <LoginForm /> : <SignupForm />}
                    <button
                        onClick={toggleForm}
                        style={{ marginTop: '10px' }} // Добавляем отступ сверху
                    >
                        {showLogin ? "Регистрация" : "Войти"}
                    </button>
                </div>
            )}
        </div>
    );
}

export default App;
```

** 6. `src\globals.ts`: **
```typescript
export const tenantId = '8b67zygn';

// test userfront Admin API key
// export const apiKey = 'mui-uf_test_admin_8b67zygn_89869f58d5d0ca48d45faa3612dee666';

// live userfront Admin API key
export const apiKey = 'uf_live_admin_8b67zygn_9741badcf6b7d5ba32512fdfbcd01eac';

// const tenantId = process.env.REACT_APP_USERFRONT_TENANT_ID;
// const apiKey = process.env.REACT_APP_USERFRONT_API_KEY;
// export { tenantId, apiKey };


```

** 7. `src\globals_VITE.ts`: **
```typescript
const getApiKey = () => {
    if (import.meta.env.VITE_ENV === 'production') {
      return import.meta.env.VITE_USERFRONT_LIVE_API_KEY || '';
    } else {
      return import.meta.env.VITE_USERFRONT_TEST_API_KEY || '';
    }
  };
  
  const getBaseName = () => {
    if (import.meta.env.VITE_ENV === 'production') {
      return import.meta.env.VITE_BASENAME_PROD || '';
    } else {
      return import.meta.env.VITE_BASENAME_DEV || '';
    }
  };

  export const tenantId = import.meta.env.VITE_USERFRONT_TENANT_ID;
  export const apiKey = getApiKey();
  export const basename = getBaseName();
```

** 8. `src\index.css`: **
```typescript
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

```

** 9. `src\main.tsx`: **
```typescript
import React from 'react';
import ReactDOM from 'react-dom/client';
import { UserfrontProvider } from "@userfront/react";
import App from './App';
import { BrowserRouter } from 'react-router-dom';
// import { HashRouter } from 'react-router-dom';
import { tenantId, basename, } from './globals_VITE';

if (!tenantId) {
  throw new Error("REACT_APP_USERFRONT_TENANT_ID is not defined in .env");
}

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

// const basename = "/mui-uf-admin";
// const basename = "/";

//     <BrowserRouter basename="/mui-uf-admin">
// <HashRouter  >
root.render(
  <React.StrictMode>
    <UserfrontProvider tenantId={tenantId}>
    <BrowserRouter basename={basename}>
        <App />
      </BrowserRouter>
    </UserfrontProvider>
  </React.StrictMode>
);
```

** 11. `src\types.ts`: **
```typescript
export interface Column<T> {
    header: string;
    accessor?: keyof T;
    render?: (item: T) => React.ReactNode;
  }
```

** 12. `src\vite-env.d.ts`: **
```typescript
/// <reference types="vite/client" />

```

** 13. `src\api\createUser.ts`: **
```typescript
import { User } from './fetchUsers'; // Import the User interface

interface CreateUserResponse {
    userId: number;
    username: string;
    email: string;
    authorization: any;
    // Add other properties that might be returned after creation
}

export async function createUser(
    tenantId: string,
    apiKey: string,
    newUserData: User // Expect a complete User object for creation
): Promise<CreateUserResponse> {
    try {
        // Create a new object without the authorization field
        const { authorization, ...userWithoutAuth } = newUserData;
        const response = await fetch(
            `https://api.userfront.com/v0/tenants/${tenantId}/users`,
            {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${apiKey}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(userWithoutAuth),
            }
        );

        if (!response.ok) {
            const errorData = await response.json();
            console.error("Userfront error:", errorData);
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data: CreateUserResponse = await response.json();
        return data;
    } catch (err) {
        throw err;
    }
}
```

** 14. `src\api\deleteUser.ts`: **
```typescript
export async function deleteUser(
    tenantId: string,
    apiKey: string,
    userId: number
): Promise<void> {
    try {
        const response = await fetch(
            `https://api.userfront.com/v0/tenants/${tenantId}/users/${userId}`,
            {
                method: 'DELETE',
                headers: {
                    Authorization: `Bearer ${apiKey}`,
                },
            }
        );

        if (!response.ok) {
            const errorData = await response.json();
            console.error("Userfront error:", errorData);
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        // If the deletion is successful, the response might not contain any data
        // So, we don't try to parse it as JSON.
        return; // No data to return on successful deletion
    } catch (err) {
        throw err;
    }
}
```

** 15. `src\api\fetchRoles.ts`: **
```typescript
import { tenantId, apiKey } from '../globals_VITE';

interface Role {
    name: string;
}

interface RolesResponse {
    roles: Role[];
}

export async function fetchRoles(): Promise<string[]> {
    try {
        const response = await fetch(
            `https://api.userfront.com/v0/tenants/${tenantId}/roles`,
            {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${apiKey}`,
                },
            }
        );

        if (!response.ok) {
            const errorData = await response.json();
            console.error("Userfront error:", errorData);
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data: RolesResponse = await response.json();
        return data.roles.map(role => role.name); // Extract role names
    } catch (err) {
        throw err;
    }
}
```

** 16. `src\api\fetchUsers.ts`: **
```typescript
// fetchUsers.ts

export interface User {
    userId: number; // string Or number, depending on your Userfront setup
    username: string;
    email: string;
    authorization: any;
    roles?: string
}
  
  interface UserResponse {
    meta: any;
    results: User[];
  }
  
  export async function fetchUsers(
    tenantId: string,
    apiKey: string
  ): Promise<User[]> {
    // try {
      const response = await fetch(
        `https://api.userfront.com/v0/tenants/${tenantId}/users`,
        {
          headers: {
            Authorization: `Bearer ${apiKey}`,
          },
        }
      );
  
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
  
      const data: UserResponse = await response.json();
      return data.results;
    // } catch (err) {
    //   throw err;
    // }
  }
```

** 17. `src\api\updateUser.ts`: **
```typescript
import { User } from './fetchUsers'; // Import the User interface

interface UpdateUserResponse {
  userId: string;
  username: string;
  email: string;
  authorization: any;
  // Add other properties that might be returned after update
}

export async function updateUser(
  tenantId: string,
  apiKey: string,
  userId: number,
  updatedUserData: Partial<User> // Use Partial to allow partial updates
): Promise<UpdateUserResponse> {
  try {
    const updatedUserData1 = {
      username: updatedUserData.username,
      email: updatedUserData.email,
    };
    
    const response = await fetch(
      `https://api.userfront.com/v0/tenants/${tenantId}/users/${userId}`,
      {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedUserData1),
      }
    );

    if (!response.ok) {
        const errorData = await response.json();
        console.error("Userfront error:", errorData);
        throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data: UpdateUserResponse = await response.json();
    return data;
  } catch (err) {
    throw err;
  }
}
```

** 18. `src\api\updateUserRoles.ts`: **
```typescript
import { User } from './fetchUsers';

export interface AuthorizationUpdate {
    roles: string[];
}

export async function updateUserRoles(
    tenantId: string,
    apiKey: string,
    userId: number,
    updateData: AuthorizationUpdate // Явное использование интерфейса
): Promise<User> {
    try {
        const response = await fetch(
            `https://api.userfront.com/v0/tenants/${tenantId}/users/${userId}/roles`,
            {
                method: 'PUT',
                headers: {
                    Authorization: `Bearer ${apiKey}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updateData), // Используем updateData
            }
        );

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const updatedUser: User = await response.json();
        return updatedUser;
    } catch (err) {
        throw err;
    }
}


```

** 19. `src\assets\react.svg`: **
```typescript
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
```

** 22. `src\pages\Dashboard.tsx`: **
```typescript
import React from 'react';

const Dashboard: React.FC = () => {
  return <div>Добро пожаловать в админ-панель!</div>;
};

export default Dashboard;
```

** 23. `src\pages\Users.tsx`: **
```typescript
import React from 'react';
import UserList from '../components/Users/UserList';

const Users: React.FC = () => {
  return (
    <div>
      <h2>Пользователи</h2>
      <UserList />
    </div>
  );
};

export default Users;
```

** 24. `src\components\Shared\Modal.css`: **
```typescript
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5); /* Полупрозрачный черный фон для затемнения */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; /* Обеспечивает отображение поверх всего остального */
}

.modal-content {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    position: relative; /* Для позиционирования кнопки закрытия */
    min-width: 300px; /* Минимальная ширина модального окна */
}

.modal-buttons {
    display: flex;
    justify-content: flex-end;
    margin-top: 20px;
}

.modal-button {
    padding: 8px 16px;
    border: 1px solid #ccc;
    background-color: #f0f0f0;
    color: #333;
    border-radius: 4px;
    cursor: pointer;
    margin-left: 10px;
}

.modal-button:hover {
    background-color: #e0e0e0;
}
```

** 25. `src\components\Shared\Modal.tsx`: **
```typescript
import React from 'react';
import './Modal.css';

interface ModalProps {
    isOpen: boolean;
    children: React.ReactNode;
}

const Modal: React.FC<ModalProps> = ({ isOpen, children }) => {
    if (!isOpen) return null;

    return (
        <div className="modal-overlay">
            <div className="modal-content">
                {children}
            </div>
        </div>
    );
};

export default Modal;
```

** 26. `src\components\Shared\Table.tsx`: **
```typescript
import { Column } from '../../types';

interface TableProps<T> {
  data: T[];
  columns: Column<T>[];
}

const Table = <T extends {}>({ data, columns }: TableProps<T>) => {
  return (
    <table>
      <thead>
        <tr>
          {columns.map((column) => (
            <th key={column.header}>{column.header}</th>
          ))}
        </tr>
      </thead>
      <tbody>
        {data.map((item, index) => (
          <tr key={index}>
            {columns.map((column, colIndex) => (
              <td key={colIndex}>
                {column.render ? column.render(item) : (item as any)[column.accessor]}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default Table;
```

** 27. `src\components\Users\UserForm.css`: **
```typescript
/* UserForm.css */
.error-message {
    color: red;
    font-size: 12px;
    margin-top: 4px;
  }
```

** 28. `src\components\Users\UserForm.tsx`: **
```typescript
import React, { useState, useEffect } from 'react';
import { Formik, Form, Field, ErrorMessage, FieldArray } from 'formik';
import * as Yup from 'yup';
import { User } from '../../api/fetchUsers';
import { tenantId } from '../../globals_VITE';
import './UserForm.css';
import { fetchRoles } from '../../api/fetchRoles';

interface UserFormProps {
    user?: User;
    onSave: (values: User) => void;
    onCancel: () => void;
    title?: string;
}

const UserForm: React.FC<UserFormProps> = ({ user, onSave, onCancel, title = "Форма пользователя"  }) => {
    const [availableRoles, setAvailableRoles] = useState<string[]>([]);

    useEffect(() => {
        const loadRoles = async () => {
            try {
                const roles = await fetchRoles();
                setAvailableRoles(roles);
            } catch (err) {
                console.error("Error fetching roles:", err);
            }
        };

        loadRoles();
    }, []);

    const initialValues: User = user || {
        username: '',
        email: '',
        authorization: { [tenantId]: { roles: [] } },
        userId: 0,
    };

    const validationSchema = Yup.object({
        username: Yup.string().required('Обязательно'),
        email: Yup.string().email('Некорректный email').required('Обязательно'),
        password: user
            ? Yup.string().min(6, 'Пароль должен быть не менее 6 символов').optional()
            : Yup.string().min(6, 'Пароль должен быть не менее 6 символов').required('Обязательно'),
        userId: Yup.number().required('Обязательно'),
    });

    // const handleSubmit = (values: User) => {
    //     onFormChange(values);
    // };

    // useEffect(() => {
    //     onFormChange(initialValues);
    // }, []);

    const inputStyle = {
        width: '200px',
        padding: '8px',
        margin: '4px 0',
        boxSizing: 'border-box',
        border: '1px solid #ccc',
        borderRadius: '4px',
    };

    const labelStyle = {
        display: 'inline-block',
        width: '120px',
        marginRight: '10px',
        textAlign: 'right' as React.CSSProperties['textAlign'],
    };

    return (
        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={(values) => onSave(values)}>
            {({ values }) => (
                <Form>
                    <h3>{title}</h3> 
                    <div>
                        <label htmlFor="userId" style={labelStyle}>ID пользователя:</label>
                        <Field id="userId" name="userId" type="number" placeholder="ID пользователя" style={inputStyle} />
                        <ErrorMessage name="userId" component="div" className="error-message" />
                    </div>

                    <div>
                        <label htmlFor="username" style={labelStyle}>Имя пользователя:</label>
                        <Field id="username" name="username" placeholder="Имя пользователя" style={inputStyle} />
                        <ErrorMessage name="username" component="div" className="error-message" />
                    </div>

                    <div>
                        <label htmlFor="email" style={labelStyle}>Email:</label>
                        <Field id="email" name="email" type="email" placeholder="Email" style={inputStyle} />
                        <ErrorMessage name="email" component="div" className="error-message" />
                    </div>

                    <div>
                        <label htmlFor="password" style={labelStyle}>Пароль:</label>
                        <Field id="password" name="password" type="password" placeholder="Пароль" style={inputStyle} />
                        <ErrorMessage name="password" component="div" className="error-message" />
                    </div>

                    <div>
                        <label style={labelStyle}>Роли:</label>
                        <div style={{ marginLeft: '130px'}}>
                        <FieldArray name={`authorization.${tenantId}.roles`}>
                            {({ push, remove, /*form*/ }) => (
                                <div>
                                    {availableRoles.map((role) => (
                                        <div key={role}>
                                            <label>
                                                <input
                                                    type="checkbox"
                                                    checked={values.authorization?.[tenantId]?.roles?.includes(role)}
                                                    onChange={(e) => {
                                                        if (e.target.checked) {
                                                            push(role);
                                                        } else {
                                                            const index = values.authorization?.[tenantId]?.roles?.indexOf(role);
                                                            if (index !== -1) {
                                                                remove(index);
                                                            }
                                                        }
                                                    }}
                                                />
                                                {role}
                                            </label>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </FieldArray>
                    </div>
                    </div>
                    <div className="modal-buttons">
                        <button type="button" className="modal-button" onClick={onCancel}>Отмена</button>
                        <button type="submit" className="modal-button">Записать</button>
                    </div>
                </Form>
            )}
        </Formik>
    );
};

export default UserForm;
```

** 29. `src\components\Users\UserList.tsx`: **
```typescript
import React, { useState, useEffect } from 'react';
import Modal from '../Shared/Modal';
import Table from '../Shared/Table';
import UserForm from './UserForm';
import { fetchUsers, User } from '../../api/fetchUsers';
import { updateUser } from '../../api/updateUser';
import { createUser } from '../../api/createUser';
import { deleteUser } from '../../api/deleteUser';
import { tenantId, apiKey } from '../../globals_VITE';
import { updateUserRoles } from '../../api/updateUserRoles';

const UserList: React.FC = () => {
    const [users, setUsers] = useState<User[]>([]);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedUser, setSelectedUser] = useState<User | null>(null);
    const [error, setError] = useState<Error | null>(null);
    // const [userToDelete, setUserToDelete] = useState<number | null>(null);

    const getUsers = async () => {
        try {
            const fetchedUsers = await fetchUsers(tenantId, apiKey);
            console.log('fetchedUsers', fetchedUsers);
            setUsers([...fetchedUsers]);
            setError(null);
        } catch (err) {
            console.log(err);
            if (err instanceof Error) {
                setError(err);
            } else {
                setError(new Error('An unexpected error occurred.'));
            }
        }
    };

    useEffect(() => {
        getUsers();
    }, []);

    if (error) {
        return <div>Ошибка: {error.message}</div>;
    }

    const handleOpenModal = (user: User | null) => {
        setSelectedUser(user);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setSelectedUser(null);
        // setUserToDelete(null);
    };

    const handleUserUpdate = async (updatedUser: User) => {
        try {
            await updateUser(tenantId, apiKey, updatedUser.userId, {
                username: updatedUser.username,
                email: updatedUser.email,
            });

            const roles = updatedUser.authorization[tenantId].roles;
            if (roles) {
                await updateUserRoles(tenantId, apiKey, updatedUser.userId, { roles });
            }
            await getUsers();
            handleCloseModal();
        } catch (err) {
            console.error('Error updating user:', err);
            setError(new Error('Failed to update user.'));
        }
    };

    const handleUserCreate = async (newUser: User) => {
        try {
            const createdUser = await createUser(tenantId, apiKey, newUser);

            const roles = newUser.authorization[tenantId].roles;
            if (roles) {
                await updateUserRoles(tenantId, apiKey, createdUser.userId, { roles });
            }
            await getUsers();
            handleCloseModal();
        } catch (err) {
            console.error('Error creating user:', err);
            setError(new Error('Failed to create user.'));
        }
    };

    const handleSave = async (values: User) => {
        if (selectedUser) {
            await handleUserUpdate(values);
        } else {
            await handleUserCreate(values);
        }
    };

    const handleDeleteUser = async (userId: number) => {
      if (!window.confirm('Are you sure you want to delete this user?')) {
        return;
      }
      try {
        await deleteUser(tenantId, apiKey, userId);
        setUsers(users.filter((user) => user.userId !== userId));
      } catch (err) {
        console.error('Error deleting user:', err);
        setError(new Error('Failed to delete user.'));
      }
    }
    // const handleDeleteUser = (userId: number) => {
    //     setUserToDelete(userId);
    //     setIsModalOpen(true);
    // };

    // const confirmDeleteUser = async () => {
    //     if (userToDelete !== null) {
    //         try {
    //             await deleteUser(tenantId, apiKey, userToDelete);
    //             setUsers(users.filter((user) => user.userId !== userToDelete));
    //             handleCloseModal();
    //         } catch (err) {
    //             console.error('Error deleting user:', err);
    //             setError(new Error('Failed to delete user.'));
    //         }
    //     }
    // };

    const columns = [
        { header: 'ID', accessor: 'userId' },
        { header: 'Username', accessor: 'username' },
        { header: 'Email', accessor: 'email' },
        { header: 'Roles', accessor: 'roles' },
        {
            header: 'Actions',
            render: (user: User) => (
                <>
                    <button onClick={() => handleOpenModal(user)}>Редактировать</button>
                    <button onClick={() => handleDeleteUser(user.userId)}>Удалить</button>
                </>
            ),
        },
    ];

    const userRoles = (user: User) => {
        return user.authorization[tenantId]?.roles.join(', ') ?? '';
    };

    const usersExt = users.map((user) => {
        return {
            ...user,
            roles: userRoles(user),
        };
    });

    return (
        <div>
            <button onClick={() => handleOpenModal(null)}>Добавить пользователя</button>
            <Table data={usersExt} columns={columns as any} />
            <Modal isOpen={isModalOpen}>
                <UserForm
                    user={selectedUser === null ? undefined : selectedUser}
                    title={selectedUser === null ? 'Добавить пользователя' : 'Редактировать пользователя'}  
                    onSave={handleSave}
                    onCancel={handleCloseModal}
                />
            </Modal>
        </div>
    );
};

export default UserList;
```